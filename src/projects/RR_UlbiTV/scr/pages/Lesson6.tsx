import * as React from "react";

export function Lesson6() {
  return (
    <div className="RR_ULBITV--body__lesson6">
      <h2>Lesson6</h2>
      <h3>Redux saga асинхронные actions</h3>
      <div>
        <p>
          <span>
            Redux-saga - библ., для побочных эффектов приложений (асинхрон
            извлеч. данных, до
          </span>
          ступ к кешу браузера) направленым на простоту управления, эффектным
          выполнением, простыми в тестировании и лучше справляющимися со сбоями.
        </p>
      </div>
      <div>
        <h2>Основые концепции</h2>
        <p>
          <span>Workers</span> - fn()* выполн. асинхр. логику (timeout, асинх.
          запросы на сервер)
        </p>
        <p>
          <span>Wotchers</span> - fn()* где с помощью спец.fn() указываем тип{" "}
          <b>action</b> и <b>Workers</b> который будет отрабатывать когда{" "}
          <b>action</b> с указаным типом, будет отрабатывать. <br />
          Наблюдает за отработкой <b>action</b>, е/и есть привязка{" "}
          <b>Workers</b>, то вызов данной fn()
        </p>
        <p>
          <span>Effects</span> - набор встроеных fn(), помощь для запросов,
          dispatch, след. за Workers и т.д.
        </p>
        <p>
          Построен на <span>Генраторах</span>. fn() со (<span>*</span>).
          Возвращ. данные поэтапно. В fn() вызов return, и он возвращ.
          одинаковые данные. Использ. ключ-ое слово <b>yield</b>
        </p>
        <p>
          <span>yield</span> `урожай` наприм. перебор for до 5 и вернуть №
          итерации цикла. К результату + <b>.next()</b>. Тогда на каждый вызов
          получаем счетчик до 5, дойдя до 5 в поле done (указ. в логах
          `выполнено`) будет true
        </p>
      </div>
      <div>
        <p></p>
      </div>
      <div>
        <p></p>
      </div>
      <div>
        <p></p>
      </div>
    </div>
  );
}
